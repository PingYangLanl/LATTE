%!PS-Adobe-3.0
%%Title: fspinnono.f90
%%For: Marc Jon Cawkwell
%%Creator: a2ps version 4.14
%%CreationDate: Mon Aug 29 16:28:14 2016
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 11
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!) c n
(! Copyright 2010.  Los Alamos National Security, LLC. This material was    !) N
(! produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos !) N
(! National Laboratory \(LANL\), which is operated by Los Alamos National     !) N
(! Security, LLC for the U.S. Department of Energy. The U.S. Government has !) N
(! rights to use, reproduce, and distribute this software.  NEITHER THE     !) N
(! GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY,     !) N
(! EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS         !) N
(! SOFTWARE.  If software is modified to produce derivative works, such     !) N
(! modified software should be clearly marked, so as not to confuse it      !) N
(! with the version available from LANL.                                    !) N
(!                                                                          !) N
(! Additionally, this program is free software; you can redistribute it     !) N
(! and/or modify it under the terms of the GNU General Public License as    !) N
(! published by the Free Software Foundation; version 2.0 of the License.   !) N
(! Accordingly, this program is distributed in the hope that it will be     !) N
(! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of   !) N
(! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General !) N
(! Public License for more details.                                         !) N
(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!) N
() p n
(SUBROUTINE) K
( ) p
(FSPINNONO) L n
() p n
(  ) S
(USE) K
( ) p
(CONSTANTS_MOD) l n
(  ) p
(USE) K
( ) p
(SETUPARRAY) l n
(  ) p
(USE) K
( ) p
(UNIVARRAY) l n
(  ) p
(USE) K
( ) p
(NONOARRAY) l n
(  ) p
(USE) K
( ) p
(COULOMBARRAY) l n
(  ) p
(USE) K
( ) p
(NEBLISTARRAY) l n
(  ) p
(USE) K
( ) p
(SPINARRAY) l n
(  ) p
(USE) K
( ) p
(VIRIALARRAY) l n
(  ) p
(USE) K
( ) p
(MYPRECISION) l n
(  ) p n
(  ) S
(IMPLICIT) K
( ) p
(NONE) K n
() p n
(  ) S
(INTEGER) K
( :: I, J, K, KK, INDI, INDJ) p n
(  ) S
(INTEGER) K
( :: NEWJ) p n
(  ) S
(INTEGER) K
( :: PBCI, PBCJ, PBCK) p n
(  ) S
(INTEGER) K
( :: SPININD ) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: HSSS, HSPS, HPSS, HPPS, HPPP) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: RIJ\(3\), DC\(3\)) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: L, M, N, L2, M2, N2, LM, LN, MN, LMN) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: DSSSDR\(3\), DSPSDR\(3\), DPSSDR\(3\), DPPSDR\(3\), DPPPDR\(3\)) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: MAGR, INVR, FTMPS\(3\), FTMPP\(3\), FTMP\(3\)) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: PPSMPPP, PPSUBINVR) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: VIRTMP\(6\), VIRTMPS\(6\), VIRTMPP\(6\)) p n
(  ) S
(CHARACTER) K
(\() p
(LEN) K
(=2\) :: BASISI, BASISJ) p n
() N
(!  INDI = 0) c n
() p n
(  FSSPIN = ZERO) N
() N
(  VIRSSPIN = ZERO) N
() N
(  ) S
(!) c n
(  ) p
(! We are computing the contribution to the forces from the ) c n
(  ) p
(! S dependence of the Mulliken spin densities when we use ) c n
(  ) p
(! the non-orthogonal basis) c n
() p n
(  ) S
(DO) K
( I = 1, NATS) p n
() N
(     BASISI = BASIS\(ELEMPOINTER\(I\)\)) N
(fspinnono.f90) (Page 1/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     INDI = MATINDLIST\(I\)) p n
(     ) S
(! Loop over all neighbors of I) c n
() p n
(     ) S
(DO) K
( NEWJ = 1, TOTNEBTB\(I\)) p n
(        ) N
(        J = NEBTB\(1, NEWJ, I\)) N
(        PBCI = NEBTB\(2, NEWJ, I\)) N
(        PBCJ = NEBTB\(3, NEWJ, I\)) N
(        PBCK = NEBTB\(4, NEWJ, I\)        ) N
(        ) N
(        INDJ = MATINDLIST\(J\)) N
(        SPININD = SPININDLIST\(J\)) N
() N
(!        INDJ = 0) c n
(!        SPININD = 0) N
(!        DO K = 1, J-1) N
(!           IF \(BASIS\(ELEMPOINTER\(K\)\) .EQ. "sp"\) THEN) N
(!              INDJ = INDJ + 4) N
(!              SPININD = SPININD + 2) N
(!           ELSEIF \(BASIS\(ELEMPOINTER\(K\)\) .EQ. "ss"\) THEN) N
(!              INDJ = INDJ + 1) N
(!              SPININD = SPININD+1) N
(!           ENDIF) N
(!        ENDDO) N
(        ) p n
(        BASISJ = BASIS\(ELEMPOINTER\(J\)\)) N
() N
(        RIJ\(1\) = CR\(1,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,1\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,1\) + &) p n
(             ) S
(REAL) K
(\(PBCK\)*BOX\(3,1\) - CR\(1,I\)) p n
() N
(        RIJ\(2\) = CR\(2,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,2\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,2\) + &) p n
(             ) S
(REAL) K
(\(PBCK\)*BOX\(3,2\) - CR\(2,I\)) p n
() N
(        RIJ\(3\) = CR\(3,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,3\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,3\) + &) p n
(             ) S
(REAL) K
(\(PBCK\)*BOX\(3,3\) - CR\(3,I\)) p n
() N
(!        RIJ\(1\) = CR\(1,J\) + FLOAT\(PBCI\)*BOXDIMS\(1\) - CR\(1,I\)) c n
(!        RIJ\(2\) = CR\(2,J\) + FLOAT\(PBCJ\)*BOXDIMS\(2\) - CR\(2,I\)) N
(!        RIJ\(3\) = CR\(3,J\) + FLOAT\(PBCK\)*BOXDIMS\(3\) - CR\(3,I\)  ) N
(         ) p n
(        MAGR = ) S
(SQRT) K
(\(RIJ\(1\)*RIJ\(1\) + RIJ\(2\)*RIJ\(2\) + RIJ\(3\)*RIJ\(3\)\)) p n
(        ) N
(        INVR = ONE/MAGR) N
(        ) N
(        FTMPS = ZERO) N
(        FTMPP = ZERO) N
() N
(        ) S
(! ) c n
(        ) p
(! Direction cosines \(DC\)) c n
(        ) p
(!) c n
(           ) p n
(        DC = RIJ/MAGR) N
(        ) N
(        L = DC\(1\)) N
(        M = DC\(2\)) N
(        N = DC\(3\)) N
() N
(        ) S
(! Let's compute rho * dS/dR) c n
() p n
(        ) S
(IF) K
( \(BASISI ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(           ) p n
(           ) S
(IF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(fspinnono.f90) (Page 2/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (1/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              ) p n
(              ) S
(DO) K
( K = 1, NOINT) p n
(                 ) S
(IF) K
( \(\(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                      \(ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\)\) ) p
(THEN) K n
(                    ) p n
(                    ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSSDR\)) p n
() N
(                    ) S
(ENDIF) K n
(                    ) p n
(                 ) S
(ENDIF) K n
(              ) p
(ENDDO) K n
() p n
(              FTMPS = FTMPS -  DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
(                ) N
(           ) S
(ELSEIF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(DO) K
( K = 1, NOINT) p n
(                 ) N
(                 ) S
(IF) K
( \(\(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                      \(ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\)\) ) p
(THEN) K n
(                    ) p n
(                    ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSSDR\)) p n
() N
(                    ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSPS, DSPSDR\)) p n
(                       ) N
(                    ) S
(ENDIF) K n
(                 ) p
(ENDIF) K n
(              ) p
(ENDDO) K n
(              ) p n
(              L2 = L*L) N
(              M2 = M*M) N
(              N2 = N*N) N
(              LM = L*M) N
(              LN = L*N) N
(              MN = M*N) N
() N
(              ) S
(! E_s1,s2) c n
(              ) p n
(              FTMPS = FTMPS - DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
(              ) N
(              ) S
(! E_s1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(1\) + \(L2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(2\) + LM*INVR*HSPS\)) N
(              ) N
(fspinnono.f90) (Page 3/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+1, INDJ+2\) - &) p n
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(3\) + LN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(1\) + LM*INVR*HSPS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(2\) + \(M2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(3\) + MN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(1\) + LN*INVR*HSPS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(2\) + MN*INVR*HSPS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(3\) + \(N2 - ONE\)*INVR*HSPS\)) N
(              ) N
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ELSEIF) K
( \(BASISI ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(           ) p n
(           ) S
(IF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(DO) K
( K = 1, NOINT) p n
(                 ) N
(                 ) S
(IF) K
( \(\(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                      \(ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\)\) ) p
(THEN) K n
(                    ) p n
(                    ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSSDR\)) p n
() N
(                    ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPSS, DPSSDR\)) p n
() N
(                       HPSS = -HPSS) N
(                       DPSSDR = -DPSSDR) N
() N
(                    ) S
(ENDIF) K n
(                 ) p
(ENDIF) K n
(              ) p
(ENDDO) K n
(              ) p n
(              L2 = L*L) N
(              M2 = M*M) N
(fspinnono.f90) (Page 4/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (2/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              N2 = N*N) p n
(              LM = L*M) N
(              LN = L*N) N
(              MN = M*N) N
() N
(              ) S
(! E_s1,s2) c n
(              ) p n
(              FTMPS = FTMPS - DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
(              ) N
(              ) S
(! E_x1,s2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(1\) + \(L2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(2\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(3\) + LN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_y1,s2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(1\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(2\) + \(M2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(3\) + MN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_z1,s2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(1\) + LN*INVR*HPSS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(2\) + MN*INVR*HPSS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(3\) + \(N2 - ONE\)*INVR*HPSS\)) N
(              ) N
(           ) S
(ELSEIF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(IF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ATELE\(J\)\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(DO) K
( K = 1, NOINT) p n
(                    ) N
(                    ) S
(IF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                         ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K
(  ) p n
(fspinnono.f90) (Page 5/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSPS, DSPS) p n
(DR\)) N
() N
(                          DPSSDR = -DSPSDR) N
() N
(                          HPSS = -HSPS) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(pps) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPS, DPPS) p n
(DR\)) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(ppp) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPP, DPPP) p n
(DR\)) N
() N
(                       ) S
(ENDIF) K n
(                    ) p
(ENDIF) K n
(                 ) p
(ENDDO) K n
(                 ) p n
(              ) S
(ELSEIF) K
( \(ATELE\(I\) ) p
(.NE.) K
( ATELE\(J\)\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(DO) K
( K = 1, NOINT) p n
(                    ) N
(                    ) S
(IF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                         ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K
(                 ) p n
(                          ) N
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSPS, DSPS) p n
(DR\)) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(pps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPS, DPPS) p n
(DR\)) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(ppp) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPP, DPPP) p n
(DR\)) N
(                          ) N
(                       ) S
(ENDIF) K n
(                       ) p n
(                    ) S
(ELSEIF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                         ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSS) p n
(fspinnono.f90) (Page 6/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (3/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(DR\)) p n
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPSS, DPSS) p n
(DR\)) N
(                          ) N
(                          DPSSDR = -DPSSDR) N
(                          HPSS = -HPSS) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(pps) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPS, DPPS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(ppp) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPP, DPPP) p n
(DR\)) N
() N
(                       ) S
(ENDIF) K n
(                       ) p n
(                    ) S
(ENDIF) K n
(                 ) p
(ENDDO) K n
(                 ) p n
(              ) S
(ENDIF) K n
(              ) p n
(              PPSMPPP = HPPS - HPPP) N
(              PPSUBINVR = PPSMPPP * INVR) N
(              ) N
(              L2 = L*L) N
(              M2 = M*M) N
(              N2 = N*N) N
(              LM = L*M) N
(              LN = L*N) N
(              MN = M*N) N
(              LMN = LM*N) N
(              ) N
(              ) S
(! E_s1,s2) c n
(              ) p n
(              FTMPS = FTMPS - DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
() N
(              ) S
(! E_s1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(1\) + \(L2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(2\) + LM*INVR*HSPS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(3\) + LN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(1\) + LM*INVR*HSPS\)) N
(fspinnono.f90) (Page 7/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              ) p n
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(2\) + \(M2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(3\) + MN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(1\) + LN*INVR*HSPS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(2\) + MN*INVR*HSPS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(3\) + \(N2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_x1,s2  ) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(1\) + \(L2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(2\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) -  \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\)* &) N
(                   \(L*DPSSDR\(3\) + LN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_x1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) -  \(RHOUP\(INDI+2, INDJ+2\) - &) N
(                   RHODOWN\(INDI+2, INDJ+2\)\) * &) N
(                   \(L2*DPPSDR\(1\) + \(ONE - L2\)*DPPPDR\(1\) + &) N
(                   TWO*L*\(L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+2\) - &) N
(                   RHODOWN\(INDI+2, INDJ+2\)\) * &) N
(                   \(L2*DPPSDR\(2\) + \(ONE - L2\)*DPPPDR\(2\) + &) N
(                   TWO*L2*M*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+2\) - &) N
(                   RHODOWN\(INDI+2, INDJ+2\)\) * &) N
(                   \(L2*DPPSDR\(3\) + \(ONE - L2\)*DPPPDR\(3\) + &) N
(                   TWO*L2*N*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_x1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+2, INDJ+3\) - &) N
(                   RHODOWN\(INDI+2, INDJ+3\)\) * &) N
(                   \(LM*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   M*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+3\) - &) N
(fspinnono.f90) (Page 8/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (4/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                   RHODOWN\(INDI+2, INDJ+3\)\) * &) p n
(                   \(LM*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   L*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+3\) - &) N
(                   RHODOWN\(INDI+2, INDJ+3\)\) * &) N
(                   \(LM*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_x1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+2, INDJ+4\) - &) N
(                   RHODOWN\(INDI+2, INDJ+4\)\) * &) N
(                   \(LN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   N*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+4\) - &) N
(                   RHODOWN\(INDI+2, INDJ+4\)\)* &) N
(                   \(LN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+4\) - &) N
(                   RHODOWN\(INDI+2, INDJ+4\)\) * &) N
(                   \(LN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   L*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_y1,s2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(1\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(2\) + \(M2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(3\) + MN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_y1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+2\) - &) N
(                   RHODOWN\(INDI+3, INDJ+2\)\) * &) N
(                   \(LM*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   M*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+2\) - &) N
(                   RHODOWN\(INDI+3, INDJ+2\)\) * &) N
(                   \(LM*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   L*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+3, INDJ+2\) - &) N
(                   RHODOWN\(INDI+3, INDJ+2\)\) * &) N
(                   \(LM*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_y1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+3\) - &) N
(                   RHODOWN\(INDI+3, INDJ+3\)\) * &) N
(                   \(M2*DPPSDR\(1\) + \(ONE - M2\)*DPPPDR\(1\) + &) N
(fspinnono.f90) (Page 9/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                   TWO*L*M2*PPSUBINVR\)) p n
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+3\) - &) N
(                   RHODOWN\(INDI+3, INDJ+3\)\) * &) N
(                   \(M2*DPPSDR\(2\) + \(ONE - M2\)*DPPPDR\(2\) + &) N
(                   TWO*M*\(M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+3, INDJ+3\) - &) N
(                   RHODOWN\(INDI+3, INDJ+3\)\) * &) N
(                   \(M2*DPPSDR\(3\) + \(ONE - M2\)*DPPPDR\(3\) + &) N
(                   TWO*N*M2*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_y1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+4\) - &) N
(                   RHODOWN\(INDI+3, INDJ+4\)\) * &) N
(                   \(MN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+4\) - &) N
(                   RHODOWN\(INDI+3, INDJ+4\)\) * &) N
(                   \(MN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   N*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) -  \(RHOUP\(INDI+3, INDJ+4\) - &) N
(                   RHODOWN\(INDI+3, INDJ+4\)\)* &) N
(                   \(MN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   M*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_z1,s2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(1\) + LN*INVR*HPSS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(2\) + MN*INVR*HPSS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(3\) + \(N2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_z1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+2\) - &) N
(                   RHODOWN\(INDI+4, INDJ+2\)\) * &) N
(                   \(LN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   N*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+2\) - &) N
(                   RHODOWN\(INDI+4, INDJ+2\)\) * &) N
(                   \(LN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+2\) - &) N
(                   RHODOWN\(INDI+4, INDJ+2\)\) * &) N
(                   \(LN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   L*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_z1,y2) c n
(              ) p n
(fspinnono.f90) (Page 10/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (5/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+3\) - &) p n
(                   RHODOWN\(INDI+4, INDJ+3\)\) * &) N
(                   \(MN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+3\) - &) N
(                   RHODOWN\(INDI+4, INDJ+3\)\) * &) N
(                   \(MN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   N*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+3\) - &) N
(                   RHODOWN\(INDI+4, INDJ+3\)\) * &) N
(                   \(MN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   M*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_z1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+4\) - &) N
(                   RHODOWN\(INDI+4, INDJ+4\)\) * &) N
(                   \(N2*DPPSDR\(1\) + \(ONE - N2\)*DPPPDR\(1\) + &) N
(                   TWO*L*N2*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+4\) - &) N
(                   RHODOWN\(INDI+4, INDJ+4\)\) * &) N
(                   \(N2*DPPSDR\(2\) + \(ONE - N2\)*DPPPDR\(2\) + &) N
(                   TWO*M*N2*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+4\) - &) N
(                   RHODOWN\(INDI+4, INDJ+4\)\) * &) N
(                   \(N2*DPPSDR\(3\) + \(ONE - N2\)*DPPPDR\(3\) + &) N
(                   TWO*N*\(N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDIF) K n
() p n
(        ) S
(IF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
() p n
(           FTMP = FTMPS*DELTASPIN\(SPININD+1\)*WSS\(ELEMPOINTER\(J\)\)) N
() N
(        ) S
(ELSEIF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
() p n
(           FTMP = FTMPS*DELTASPIN\(SPININD+1\)*WSS\(ELEMPOINTER\(J\)\) + &) N
(                FTMPP*DELTASPIN\(SPININD+2\)*WPP\(ELEMPOINTER\(J\)\)) N
() N
(        ) S
(ENDIF) K n
(           ) p n
(        FSSPIN\(1,I\) = FSSPIN\(1,I\) + FTMP\(1\)) N
(        FSSPIN\(2,I\) = FSSPIN\(2,I\) + FTMP\(2\)) N
(        FSSPIN\(3,I\) = FSSPIN\(3,I\) + FTMP\(3\)) N
() N
(        ) S
(! with the factor of 2...) c n
(        ) p n
(        VIRSSPIN\(1\) = VIRSSPIN\(1\) + RIJ\(1\)*FTMP\(1\)) N
(        VIRSSPIN\(2\) = VIRSSPIN\(2\) + RIJ\(2\)*FTMP\(2\)) N
(        VIRSSPIN\(3\) = VIRSSPIN\(3\) + RIJ\(3\)*FTMP\(3\)) N
(        VIRSSPIN\(4\) = VIRSSPIN\(4\) + RIJ\(1\)*FTMP\(2\)) N
(        VIRSSPIN\(5\) = VIRSSPIN\(5\) + RIJ\(2\)*FTMP\(3\)) N
(        VIRSSPIN\(6\) = VIRSSPIN\(6\) + RIJ\(3\)*FTMP\(1\)) N
(        ) N
(     ) S
(ENDDO) K n
() p n
(fspinnono.f90) (Page 11/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!     IF \(BASISI .EQ. "sp"\) INDI = INDI + 4) c n
(!     IF \(BASISI .EQ. "ss"\) INDI = INDI + 1) N
() p n
(  ) S
(ENDDO) K n
() p n
(!  INDI = 0 ) c n
(  SPININD = 0) p n
(  ) S
(DO) K
( I = 1, NATS) p n
() N
() N
(     BASISI = BASIS\(ELEMPOINTER\(I\)\)) N
(     INDI = MATINDLIST\(I\)) N
() N
(     ) S
(! Loop over all neighbors of I  ) c n
(     ) p n
(     FTMPS = ZERO) N
(     FTMPP = ZERO) N
(     VIRTMPS = ZERO) N
(     VIRTMPP = ZERO) N
() N
(     ) S
(DO) K
( NEWJ = 1, TOTNEBTB\(I\)) p n
(        ) N
(        J = NEBTB\(1, NEWJ, I\)) N
(        PBCI = NEBTB\(2, NEWJ, I\)) N
(        PBCJ = NEBTB\(3, NEWJ, I\)) N
(        PBCK = NEBTB\(4, NEWJ, I\)        ) N
(        ) N
() N
(        INDJ = MATINDLIST\(J\)) N
() N
(!        INDJ = 0) c n
(!        DO K = 1, J-1) N
(!           IF \(BASIS\(ELEMPOINTER\(K\)\) .EQ. "sp"\) THEN) N
(!              INDJ = INDJ + 4) N
(!           ELSEIF \(BASIS\(ELEMPOINTER\(K\)\) .EQ. "ss"\) THEN) N
(!              INDJ = INDJ + 1) N
(!           ENDIF) N
(!        ENDDO) N
(        ) p n
(        BASISJ = BASIS\(ELEMPOINTER\(J\)\)) N
(        ) N
(        RIJ\(1\) = CR\(1,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,1\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,1\) + &) p n
(             ) S
(REAL) K
(\(PBCK\)*BOX\(3,1\) - CR\(1,I\)) p n
(        ) N
(        RIJ\(2\) = CR\(2,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,2\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,2\) + &) p n
(             ) S
(REAL) K
(\(PBCK\)*BOX\(3,2\) - CR\(2,I\)) p n
() N
(        RIJ\(3\) = CR\(3,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,3\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,3\) + &) p n
(             ) S
(REAL) K
(\(PBCK\)*BOX\(3,3\) - CR\(3,I\)) p n
(       ) N
(!        RIJ\(1\) = CR\(1,J\) + FLOAT\(PBCI\)*BOXDIMS\(1\) - CR\(1,I\)) c n
(!        RIJ\(2\) = CR\(2,J\) + FLOAT\(PBCJ\)*BOXDIMS\(2\) - CR\(2,I\)) N
(!        RIJ\(3\) = CR\(3,J\) + FLOAT\(PBCK\)*BOXDIMS\(3\) - CR\(3,I\)  ) N
(        ) p n
(        MAGR = ) S
(SQRT) K
(\(RIJ\(1\)*RIJ\(1\) + RIJ\(2\)*RIJ\(2\) + RIJ\(3\)*RIJ\(3\)\)) p n
(        ) N
(        INVR = ONE/MAGR) N
(        ) N
(        ) S
(!FTMP = ZERO) c n
(        ) p n
(        ) S
(! ) c n
(        ) p
(! Direction cosines \(DC\)) c n
(fspinnono.f90) (Page 12/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (6/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(!) c n
(        ) p n
(        DC = RIJ/MAGR) N
(        ) N
(        L = DC\(1\)) N
(        M = DC\(2\)) N
(        N = DC\(3\)) N
() N
(        ) S
(! Let's compute rho * dS/dR) c n
() p n
(        ) S
(IF) K
( \(BASISI ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(           ) p n
(           ) S
(IF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(DO) K
( K = 1, NOINT) p n
(                 ) S
(IF) K
( \(\(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                      \(ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\)\) ) p
(THEN) K n
(                    ) p n
(                    ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSSDR\)) p n
() N
(                    ) S
(ENDIF) K n
(                    ) p n
(                 ) S
(ENDIF) K n
(              ) p
(ENDDO) K n
() p n
(              FTMPS = FTMPS -  DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                         RHODOWN\(INDI+1, INDJ+1\)\)) N
() N
(           ) S
(ELSEIF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(DO) K
( K = 1, NOINT) p n
(                 ) N
(                 ) S
(IF) K
( \(\(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                      \(ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\)\) ) p
(THEN) K n
(                    ) p n
(                    ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSSDR\)) p n
() N
(                    ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSPS, DSPSDR\)) p n
(                       ) N
(                    ) S
(ENDIF) K n
(                 ) p
(ENDIF) K n
(              ) p
(ENDDO) K n
(              ) p n
(              L2 = L*L) N
(              M2 = M*M) N
(              N2 = N*N) N
(              LM = L*M) N
(              LN = L*N) N
(              MN = M*N) N
(              ) N
(              ) S
(! E_s1,s2) c n
(              ) p n
(fspinnono.f90) (Page 13/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              FTMPS = FTMPS - DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) p n
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
(              ) N
(              ) S
(! E_s1,x2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(1\) + \(L2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(2\) + LM*INVR*HSPS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(3\) + LN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,y2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(1\) + LM*INVR*HSPS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(2\) + \(M2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(3\) + MN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,z2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(1\) + LN*INVR*HSPS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(2\) + MN*INVR*HSPS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(3\) + \(N2 - ONE\)*INVR*HSPS\)) N
(              ) N
(           ) S
(ENDIF) K n
() p n
(        ) S
(ELSEIF) K
( \(BASISI ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(           ) p n
(           ) S
(IF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(DO) K
( K = 1, NOINT) p n
(                 ) N
(                 ) S
(IF) K
( \(\(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                      \(ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                      ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\)\) ) p
(THEN) K n
(                    ) p n
(                    ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSSDR\)) p n
() N
(fspinnono.f90) (Page 14/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (7/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                    ) p
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPSS, DPSSDR\)) p n
() N
(                       HPSS = -HPSS) N
(                       DPSSDR = -DPSSDR) N
() N
(                    ) S
(ENDIF) K n
(                 ) p
(ENDIF) K n
(              ) p
(ENDDO) K n
(              ) p n
(              L2 = L*L) N
(              M2 = M*M) N
(              N2 = N*N) N
(              LM = L*M) N
(              LN = L*N) N
(              MN = M*N) N
(              ) N
(              ) S
(! E_s1,s2) c n
(              ) p n
(              FTMPS = FTMPS - DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
(              ) N
(              ) S
(! E_x1,s2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(1\) + \(L2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(2\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(3\) + LN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_y1,s2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(1\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(2\) + \(M2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(3\) + MN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_z1,s2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(1\) + LN*INVR*HPSS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(2\) + MN*INVR*HPSS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(fspinnono.f90) (Page 15/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) p n
(                   \(N*DPSSDR\(3\) + \(N2 - ONE\)*INVR*HPSS\)) N
(              ) N
(           ) S
(ELSEIF) K
( \(BASISJ ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(              ) p n
(              ) S
(IF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ATELE\(J\)\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(DO) K
( K = 1, NOINT) p n
(                    ) N
(                    ) S
(IF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                         ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K
(  ) p n
(                          ) N
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSPS, DSPS) p n
(DR\)) N
() N
(                          DPSSDR = -DSPSDR) N
() N
(                          HPSS = -HSPS) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(pps) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPS, DPPS) p n
(DR\)) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(ppp) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPP, DPPP) p n
(DR\)) N
() N
(                       ) S
(ENDIF) K n
(                    ) p
(ENDIF) K n
(                 ) p
(ENDDO) K n
(                 ) p n
(              ) S
(ELSEIF) K
( \(ATELE\(I\) ) p
(.NE.) K
( ATELE\(J\)\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(DO) K
( K = 1, NOINT) p n
(                    ) N
(                    ) S
(IF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                         ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K
(                 ) p n
(                          ) N
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSPS, DSPS) p n
(DR\)) N
(                          ) N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(pps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPS, DPPS) p n
(DR\)) N
(                          ) N
(fspinnono.f90) (Page 16/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (8/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                       ) p
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(ppp) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPP, DPPP) p n
(DR\)) N
(                          ) N
(                       ) S
(ENDIF) K n
(                       ) p n
(                    ) S
(ELSEIF) K
( \(ATELE\(I\) ) p
(.EQ.) K
( ELE2\(K\) ) p
(.AND.) K
( &) p n
(                         ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\)\) ) p
(THEN) K n
(                       ) p n
(                       ) S
(IF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sss) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HSSS, DSSS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(sps) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPSS, DPSS) p n
(DR\)) N
(                          ) N
(                          DPSSDR = -DPSSDR) N
(                          HPSS = -HPSS) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(pps) str
("\) ) p
(THEN) K n
() p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPS, DPPS) p n
(DR\)) N
() N
(                       ) S
(ELSEIF) K
( \(BTYPE\(K\) ) p
(.EQ.) K
( ") p
(ppp) str
("\) ) p
(THEN) K n
(                          ) p n
(                          ) S
(CALL) K
( ) p
(DUNIVSCALE_SUB) l
(\(MAGR, OVERL\(:,K\), DC, HPPP, DPPP) p n
(DR\)) N
() N
(                       ) S
(ENDIF) K n
(                       ) p n
(                    ) S
(ENDIF) K n
(                 ) p
(ENDDO) K n
(                 ) p n
(              ) S
(ENDIF) K n
(              ) p n
(              PPSMPPP = HPPS - HPPP) N
(              PPSUBINVR = PPSMPPP * INVR) N
(              ) N
(              L2 = L*L) N
(              M2 = M*M) N
(              N2 = N*N) N
(              LM = L*M) N
(              LN = L*N) N
(              MN = M*N) N
(              LMN = LM*N) N
() N
(              ) S
(! E_s1,s2) c n
(              ) p n
(              FTMPS = FTMPS - DSSSDR*\(RHOUP\(INDI+1, INDJ+1\) - &) N
(                   RHODOWN\(INDI+1, INDJ+1\)\)) N
(              ) N
(              ) S
(! E_s1,x2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(1\) + \(L2 - ONE\)*INVR*HSPS\)) N
(              ) N
(fspinnono.f90) (Page 17/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+1, INDJ+2\) - &) p n
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(2\) + LM*INVR*HSPS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+1, INDJ+2\) - &) N
(                   RHODOWN\(INDI+1, INDJ+2\)\) * &) N
(                   \(L*DSPSDR\(3\) + LN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,y2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(1\) + LM*INVR*HSPS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(2\) + \(M2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+1, INDJ+3\) - &) N
(                   RHODOWN\(INDI+1, INDJ+3\)\) * &) N
(                   \(M*DSPSDR\(3\) + MN*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_s1,z2) c n
(              ) p n
(              FTMPS\(1\) = FTMPS\(1\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(1\) + LN*INVR*HSPS\)) N
(              ) N
(              FTMPS\(2\) = FTMPS\(2\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(2\) + MN*INVR*HSPS\)) N
(              ) N
(              FTMPS\(3\) = FTMPS\(3\) - \(RHOUP\(INDI+1, INDJ+4\) - &) N
(                   RHODOWN\(INDI+1, INDJ+4\)\) * &) N
(                   \(N*DSPSDR\(3\) + \(N2 - ONE\)*INVR*HSPS\)) N
(              ) N
(              ) S
(! E_x1,s2  ) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(1\) + \(L2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\) * &) N
(                   \(L*DPSSDR\(2\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) -  \(RHOUP\(INDI+2, INDJ+1\) - &) N
(                   RHODOWN\(INDI+2, INDJ+1\)\)* &) N
(                   \(L*DPSSDR\(3\) + LN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_x1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) -  \(RHOUP\(INDI+2, INDJ+2\) - &) N
(                   RHODOWN\(INDI+2, INDJ+2\)\) * &) N
(                   \(L2*DPPSDR\(1\) + \(ONE - L2\)*DPPPDR\(1\) + &) N
(                   TWO*L*\(L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+2\) - &) N
(                   RHODOWN\(INDI+2, INDJ+2\)\) * &) N
(                   \(L2*DPPSDR\(2\) + \(ONE - L2\)*DPPPDR\(2\) + &) N
(                   TWO*L2*M*PPSUBINVR\)) N
(              ) N
(fspinnono.f90) (Page 18/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (9/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+2\) - &) p n
(                   RHODOWN\(INDI+2, INDJ+2\)\) * &) N
(                   \(L2*DPPSDR\(3\) + \(ONE - L2\)*DPPPDR\(3\) + &) N
(                   TWO*L2*N*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_x1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+2, INDJ+3\) - &) N
(                   RHODOWN\(INDI+2, INDJ+3\)\) * &) N
(                   \(LM*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   M*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+3\) - &) N
(                   RHODOWN\(INDI+2, INDJ+3\)\) * &) N
(                   \(LM*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   L*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+3\) - &) N
(                   RHODOWN\(INDI+2, INDJ+3\)\) * &) N
(                   \(LM*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_x1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+2, INDJ+4\) - &) N
(                   RHODOWN\(INDI+2, INDJ+4\)\) * &) N
(                   \(LN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   N*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+2, INDJ+4\) - &) N
(                   RHODOWN\(INDI+2, INDJ+4\)\)* &) N
(                   \(LN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+2, INDJ+4\) - &) N
(                   RHODOWN\(INDI+2, INDJ+4\)\) * &) N
(                   \(LN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   L*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_y1,s2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(1\) + LM*INVR*HPSS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(2\) + \(M2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+3, INDJ+1\) - &) N
(                   RHODOWN\(INDI+3, INDJ+1\)\) * &) N
(                   \(M*DPSSDR\(3\) + MN*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_y1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+2\) - &) N
(                   RHODOWN\(INDI+3, INDJ+2\)\) * &) N
(                   \(LM*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   M*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+2\) - &) N
(                   RHODOWN\(INDI+3, INDJ+2\)\) * &) N
(fspinnono.f90) (Page 19/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                   \(LM*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) p n
(                   L*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+3, INDJ+2\) - &) N
(                   RHODOWN\(INDI+3, INDJ+2\)\) * &) N
(                   \(LM*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_y1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+3\) - &) N
(                   RHODOWN\(INDI+3, INDJ+3\)\) * &) N
(                   \(M2*DPPSDR\(1\) + \(ONE - M2\)*DPPPDR\(1\) + &) N
(                   TWO*L*M2*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+3\) - &) N
(                   RHODOWN\(INDI+3, INDJ+3\)\) * &) N
(                   \(M2*DPPSDR\(2\) + \(ONE - M2\)*DPPPDR\(2\) + &) N
(                   TWO*M*\(M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+3, INDJ+3\) - &) N
(                   RHODOWN\(INDI+3, INDJ+3\)\) * &) N
(                   \(M2*DPPSDR\(3\) + \(ONE - M2\)*DPPPDR\(3\) + &) N
(                   TWO*N*M2*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_y1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+3, INDJ+4\) - &) N
(                   RHODOWN\(INDI+3, INDJ+4\)\) * &) N
(                   \(MN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+3, INDJ+4\) - &) N
(                   RHODOWN\(INDI+3, INDJ+4\)\) * &) N
(                   \(MN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   N*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) -  \(RHOUP\(INDI+3, INDJ+4\) - &) N
(                   RHODOWN\(INDI+3, INDJ+4\)\)* &) N
(                   \(MN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   M*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_z1,s2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(1\) + LN*INVR*HPSS\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(2\) + MN*INVR*HPSS\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+1\) - &) N
(                   RHODOWN\(INDI+4, INDJ+1\)\) * &) N
(                   \(N*DPSSDR\(3\) + \(N2 - ONE\)*INVR*HPSS\)) N
(              ) N
(              ) S
(! E_z1,x2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+2\) - &) N
(                   RHODOWN\(INDI+4, INDJ+2\)\) * &) N
(                   \(LN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   N*\(TWO*L2 - ONE\)*PPSUBINVR\)) N
(fspinnono.f90) (Page 20/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (10/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              ) p n
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+2\) - &) N
(                   RHODOWN\(INDI+4, INDJ+2\)\) * &) N
(                   \(LN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+2\) - &) N
(                   RHODOWN\(INDI+4, INDJ+2\)\) * &) N
(                   \(LN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   L*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_z1,y2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+3\) - &) N
(                   RHODOWN\(INDI+4, INDJ+3\)\) * &) N
(                   \(MN*\(DPPSDR\(1\) - DPPPDR\(1\)\) + &) N
(                   TWO*LMN*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+3\) - &) N
(                   RHODOWN\(INDI+4, INDJ+3\)\) * &) N
(                   \(MN*\(DPPSDR\(2\) - DPPPDR\(2\)\) + &) N
(                   N*\(TWO*M2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+3\) - &) N
(                   RHODOWN\(INDI+4, INDJ+3\)\) * &) N
(                   \(MN*\(DPPSDR\(3\) - DPPPDR\(3\)\) + &) N
(                   M*\(TWO*N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(              ) S
(! E_z1,z2) c n
(              ) p n
(              FTMPP\(1\) = FTMPP\(1\) - \(RHOUP\(INDI+4, INDJ+4\) - &) N
(                   RHODOWN\(INDI+4, INDJ+4\)\) * &) N
(                   \(N2*DPPSDR\(1\) + \(ONE - N2\)*DPPPDR\(1\) + &) N
(                   TWO*L*N2*PPSUBINVR\)) N
(              ) N
(              FTMPP\(2\) = FTMPP\(2\) - \(RHOUP\(INDI+4, INDJ+4\) - &) N
(                   RHODOWN\(INDI+4, INDJ+4\)\) * &) N
(                   \(N2*DPPSDR\(2\) + \(ONE - N2\)*DPPPDR\(2\) + &) N
(                   TWO*M*N2*PPSUBINVR\)) N
(              ) N
(              FTMPP\(3\) = FTMPP\(3\) - \(RHOUP\(INDI+4, INDJ+4\) - &) N
(                   RHODOWN\(INDI+4, INDJ+4\)\) * &) N
(                   \(N2*DPPSDR\(3\) + \(ONE - N2\)*DPPPDR\(3\) + &) N
(                   TWO*N*\(N2 - ONE\)*PPSUBINVR\)) N
(              ) N
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDIF) K n
(        ) p n
(        ) S
(! with the factor of 2...) c n
(        ) p n
() N
(        VIRTMPS\(1\) = VIRTMPS\(1\) + RIJ\(1\)*FTMPS\(1\)) N
(        VIRTMPS\(2\) = VIRTMPS\(2\) + RIJ\(2\)*FTMPS\(2\)) N
(        VIRTMPS\(3\) = VIRTMPS\(3\) + RIJ\(3\)*FTMPS\(3\)) N
(        VIRTMPS\(4\) = VIRTMPS\(4\) + RIJ\(1\)*FTMPS\(2\)) N
(        VIRTMPS\(5\) = VIRTMPS\(5\) + RIJ\(2\)*FTMPS\(3\)) N
(        VIRTMPS\(6\) = VIRTMPS\(6\) + RIJ\(3\)*FTMPS\(1\)) N
() N
(        VIRTMPP\(1\) = VIRTMPP\(1\) + RIJ\(1\)*FTMPP\(1\)) N
(        VIRTMPP\(2\) = VIRTMPP\(2\) + RIJ\(2\)*FTMPP\(2\)) N
(        VIRTMPP\(3\) = VIRTMPP\(3\) + RIJ\(3\)*FTMPP\(3\)) N
(fspinnono.f90) (Page 21/22) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        VIRTMPP\(4\) = VIRTMPP\(4\) + RIJ\(1\)*FTMPP\(2\)) p n
(        VIRTMPP\(5\) = VIRTMPP\(5\) + RIJ\(2\)*FTMPP\(3\)) N
(        VIRTMPP\(6\) = VIRTMPP\(6\) + RIJ\(3\)*FTMPP\(1\)) N
() N
(     ) S
(ENDDO) K n
() p n
(     ) S
(IF) K
( \(BASISI ) p
(.EQ.) K
( ") p
(s) str
("\) ) p
(THEN) K n
(        ) p n
(        FTMP = FTMPS*DELTASPIN\(SPININD+1\)*WSS\(ELEMPOINTER\(I\)\)) N
() N
(        VIRTMPS = VIRTMPS * DELTASPIN\(SPININD+1\)*WSS\(ELEMPOINTER\(I\)\)) N
() N
(        SPININD = SPININD + 1) N
(        ) N
(     ) S
(ELSEIF) K
( \(BASISI ) p
(.EQ.) K
( ") p
(sp) str
("\) ) p
(THEN) K n
(        ) p n
(        FTMP = FTMPS*DELTASPIN\(SPININD+1\)*WSS\(ELEMPOINTER\(I\)\) + &) N
(             FTMPP*DELTASPIN\(SPININD+2\)*WPP\(ELEMPOINTER\(I\)\)) N
() N
(        VIRTMPS = VIRTMPS * DELTASPIN\(SPININD+1\)*WSS\(ELEMPOINTER\(I\)\)) N
(        VIRTMPP = VIRTMPP * DELTASPIN\(SPININD+2\)*WPP\(ELEMPOINTER\(I\)\)) N
() N
(        SPININD = SPININD + 2) N
() N
(     ) S
(ENDIF) K n
(     ) p n
() N
(     FSSPIN\(1,I\) = FSSPIN\(1,I\) + FTMP\(1\)) N
(     FSSPIN\(2,I\) = FSSPIN\(2,I\) + FTMP\(2\)) N
(     FSSPIN\(3,I\) = FSSPIN\(3,I\) + FTMP\(3\)) N
() N
(     VIRSSPIN\(1\) = VIRSSPIN\(1\) + VIRTMPS\(1\) + VIRTMPP\(1\)) N
(     VIRSSPIN\(2\) = VIRSSPIN\(2\) + VIRTMPS\(2\) + VIRTMPP\(1\)) N
(     VIRSSPIN\(3\) = VIRSSPIN\(3\) + VIRTMPS\(3\) + VIRTMPP\(1\)) N
(     VIRSSPIN\(4\) = VIRSSPIN\(4\) + VIRTMPS\(4\) + VIRTMPP\(1\)) N
(     VIRSSPIN\(5\) = VIRSSPIN\(5\) + VIRTMPS\(5\) + VIRTMPP\(1\)) N
(     VIRSSPIN\(6\) = VIRSSPIN\(6\) + VIRTMPS\(6\) + VIRTMPP\(1\)) N
(          ) N
(!     IF \(BASISI .EQ. "sp"\) INDI = INDI + 4) c n
(!     IF \(BASISI .EQ. "ss"\) INDI = INDI + 1) N
(  ) p n
(  ) S
(ENDDO) K n
() p n
(  VIRSSPIN = HALF*VIRSSPIN) N
() N
(  ) S
(RETURN) K n
(  ) p n
(END) K
( ) p
(SUBROUTINE) K
( ) p
(FSPINNONO) L n
(fspinnono.f90) (Page 22/22) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(fspinnono.f90) (11/11) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
