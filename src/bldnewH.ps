%!PS-Adobe-3.0
%%Title: bldnewH.f90
%%For: Marc Jon Cawkwell
%%Creator: a2ps version 4.14
%%CreationDate: Mon Aug 29 16:34:20 2016
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!) c n
(! Copyright 2010.  Los Alamos National Security, LLC. This material was    !) N
(! produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos !) N
(! National Laboratory \(LANL\), which is operated by Los Alamos National     !) N
(! Security, LLC for the U.S. Department of Energy. The U.S. Government has !) N
(! rights to use, reproduce, and distribute this software.  NEITHER THE     !) N
(! GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY,     !) N
(! EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS         !) N
(! SOFTWARE.  If software is modified to produce derivative works, such     !) N
(! modified software should be clearly marked, so as not to confuse it      !) N
(! with the version available from LANL.                                    !) N
(!                                                                          !) N
(! Additionally, this program is free software; you can redistribute it     !) N
(! and/or modify it under the terms of the GNU General Public License as    !) N
(! published by the Free Software Foundation; version 2.0 of the License.   !) N
(! Accordingly, this program is distributed in the hope that it will be     !) N
(! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of   !) N
(! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General !) N
(! Public License for more details.                                         !) N
(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!) N
() p n
(SUBROUTINE) K
( ) p
(BLDNEWHS) L n
() p n
(  ) S
(USE) K
( ) p
(CONSTANTS_MOD) l n
(  ) p
(USE) K
( ) p
(SETUPARRAY) l n
(  ) p
(USE) K
( ) p
(NEBLISTARRAY) l n
(  ) p
(USE) K
( ) p
(XBOARRAY) l n
(  ) p
(USE) K
( ) p
(NONOARRAY) l n
(  ) p
(USE) K
( ) p
(UNIVARRAY) l n
(  ) p
(USE) K
( ) p
(MYPRECISION) l n
() p n
(  ) S
(IMPLICIT) K
( ) p
(NONE) K n
() p n
(  ) S
(INTEGER) K
( :: I, J, NEWJ, K, L, II, JJ, KK, MM, MP, NN, SUBI) p n
(  ) S
(INTEGER) K
( :: IBRA, IKET, LBRA, LKET, MBRA, MKET) p n
(  ) S
(INTEGER) K
( :: ) p
(INDEX) K
(, INDI, INDJ) p n
(  ) S
(INTEGER) K
( :: SWITCH, PREVJ) p n
(  ) S
(INTEGER) K
( :: PBCI, PBCJ, PBCK) p n
(  ) S
(INTEGER) K
( :: BASISI\(5\), BASISJ\(5\), LBRAINC, LKETINC) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: ALPHA, BETA, COSBETA, PHI, TMP, PERM) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: RIJ\(3\), MAGR2, MAGR, MAGRP, RCUTTB) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: MAXRCUT, MAXRCUT2) p n
(  ) S
(REAL) K
(\(LATTEPREC\) :: ANGFACTOR, AMMBRA, WIGLBRAMBRA) p n
(!  REAL\(LATTEPREC\), ALLOCATABLE :: SAVEHDIAG\(:\)) c n
(  ) p
(REAL) K
(\(LATTEPREC\), ) p
(EXTERNAL) K
( :: UNIVSCALE, WIGNERD, SLMMP, TLMMP, AM, BM) p n
() N
() N
(  H = ZERO) N
(  ) N
(  ) S
(INDEX) K
( = 0) p n
(  ) N
(  ) S
(! Build diagonal elements) c n
(  ) p
(DO) K
( I = 1, NATS) p n
(     ) N
(     K = ELEMPOINTER\(I\)) N
(     ) N
(     ) S
(SELECT CASE) K
(\(BASIS\(K\)\) ) p n
(        ) N
(     ) S
(CASE) K
(\(") p
(s) str
("\)) p n
(        ) N
(        ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1           ) p n
(        H\() S
(INDEX) K
(, ) p
(INDEX) K
(\) = HES\(K\)) p n
(bldnewH.f90) (Page 1/10) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p n
(     ) S
(CASE) K
(\(") p
(p) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 3) p n
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           H\() S
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(d) str
("\)) p n
(           ) N
(        ) S
(DO) K
( SUBI = 1, 5              ) p n
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           H\() S
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(f) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 7) p n
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           H\() S
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(sp) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 4) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(sd) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 6) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(sf) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 8) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(pd) str
("\)) p n
(bldnewH.f90) (Page 2/10) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(bldnewH.f90) (1/5) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p n
(        ) S
(DO) K
( SUBI = 1, 8) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.LE.) K
( 3\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(pf) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 10) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.LE.) K
( 3\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(df) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 12) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.LE.) K
( 5\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(spd) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 9) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSEIF) K
( \(SUBI ) p
(.GT.) K
( 1 ) p
(.AND.) K
( SUBI ) p
(.LE.) K
( 4\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(spf) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 11) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSEIF) K
( \(SUBI ) p
(.GT.) K
( 1 ) p
(.AND.) K
( SUBI ) p
(.LE.) K
( 4\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(bldnewH.f90) (Page 3/10) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(           ) p
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(sdf) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 13) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSEIF) K
( \(SUBI ) p
(.GT.) K
( 1 ) p
(.AND.) K
( SUBI ) p
(.LE.) K
( 6\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(        ) N
(     ) S
(CASE) K
(\(") p
(pdf) str
("\)) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 15) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1) p n
(           ) S
(IF) K
( \(SUBI ) p
(.LE.) K
( 3\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEP\(K\)) p n
(           ) S
(ELSEIF) K
( \(SUBI ) p
(.GT.) K
( 3 ) p
(.AND.) K
( SUBI ) p
(.LE.) K
( 8\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(,) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(CASE) K
(\(") p
(spdf) str
("\) ) p n
(        ) N
(        ) S
(DO) K
( SUBI = 1, 16) p n
(           ) N
(           ) S
(INDEX) K
( = ) p
(INDEX) K
( + 1              ) p n
(           ) S
(IF) K
( \(SUBI ) p
(.EQ.) K
( 1\) ) p
(THEN) K
(                       ) p n
(              H\() S
(INDEX) K
(, ) p
(INDEX) K
(\) = HES\(K\)) p n
(           ) S
(ELSEIF) K
( \(SUBI ) p
(.GT.) K
( 1 ) p
(.AND.) K
( SUBI ) p
(.LE.) K
( 4\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(, ) p
(INDEX) K
(\) = HEP\(K\)) p n
(           ) S
(ELSEIF) K
( \(SUBI ) p
(.GT.) K
( 4 ) p
(.AND.) K
( SUBI ) p
(.LE.) K
( 9\) ) p
(THEN) K n
(              H\() p
(INDEX) K
(, ) p
(INDEX) K
(\) = HED\(K\)) p n
(           ) S
(ELSE) K n
(              H\() p
(INDEX) K
(, ) p
(INDEX) K
(\) = HEF\(K\)) p n
(           ) S
(ENDIF) K n
(           ) p n
(        ) S
(ENDDO) K n
(        ) p n
(     ) S
(END) K
( SELECT) p n
(              ) N
(  ) S
(ENDDO) K n
(     ) p n
(  ) S
(IF) K
( \(BASISTYPE ) p
(.EQ.) K
( ") p
(NONORTHO) str
("\) ) p
(THEN) K n
() p n
(     SMAT = ZERO) N
() N
(bldnewH.f90) (Page 4/10) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(bldnewH.f90) (2/5) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     ) p
(DO) K
( I = 1, HDIM) p n
(        SMAT\(I,I\) = ONE) N
(     ) S
(ENDDO) K n
() p n
(  ) S
(ENDIF) K n
() p n
(!$OMP PARALLEL DO DEFAULT \(NONE\) &) c n
(!$OMP SHARED\(NATS, BASIS, ELEMPOINTER, TOTNEBTB, NEBTB\) &    ) N
(!$OMP SHARED\(CR, BOX, H, SMAT, NOINT, ATELE, ELE1, ELE2\) &           ) N
(!$OMP SHARED\(BOND, OVERL, MATINDLIST, BASISTYPE\) &) N
(!$OMP PRIVATE\(I, J, K, NEWJ, BASISI, BASISJ, INDI, INDJ, PBCI, PBCJ, PBCK\) &) N
(!$OMP PRIVATE\(RIJ, MAGR2, MAGR, MAGRP, PHI, ALPHA, BETA, COSBETA\) &) N
(!$OMP PRIVATE\(LBRAINC, LBRA, MBRA, L, LKETINC, LKET, MKET\) &        ) N
(!$OMP PRIVATE\(RCUTTB, IBRA, IKET, AMMBRA, WIGLBRAMBRA, ANGFACTOR, MP\)   ) N
() p n
(  ) S
(! open loop over atoms I in system) c n
(  ) p
(DO) K
( I = 1, NATS) p n
() N
(     ) S
(! Build the lists of orbitals on each atom) c n
() p n
(     ) S
(SELECT CASE) K
(\(BASIS\(ELEMPOINTER\(I\)\)\)) p n
(               ) N
(     ) S
(CASE) K
(\(") p
(s) str
("\)) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = -1) N
(     ) S
(CASE) K
(\(") p
(p) str
("\)) p n
(        BASISI\(1\) = 1) N
(        BASISI\(2\) = -1) N
(     ) S
(CASE) K
(\(") p
(d) str
("\)) p n
(        BASISI\(1\) = 2) N
(        BASISI\(2\) = -1) N
(     ) S
(CASE) K
(\(") p
(f) str
("\)) p n
(        BASISI\(1\) = 3) N
(        BASISI\(2\) = -1) N
(     ) S
(CASE) K
(\(") p
(sp) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 1) N
(        BASISI\(3\) = -1) N
(     ) S
(CASE) K
(\(") p
(sd) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 2) N
(        BASISI\(3\) = -1) N
(     ) S
(CASE) K
(\(") p
(sf) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 3) N
(        BASISI\(3\) = -1) N
(     ) S
(CASE) K
(\(") p
(pd) str
("\) ) p n
(        BASISI\(1\) = 1) N
(        BASISI\(2\) = 2) N
(        BASISI\(3\) = -1) N
(     ) S
(CASE) K
(\(") p
(pf) str
("\) ) p n
(        BASISI\(1\) = 1) N
(        BASISI\(2\) = 3) N
(        BASISI\(3\) = -1) N
(     ) S
(CASE) K
(\(") p
(df) str
("\) ) p n
(        BASISI\(1\) = 2) N
(        BASISI\(2\) = 3) N
(        BASISI\(3\) = -1) N
(     ) S
(CASE) K
(\(") p
(spd) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 1) N
(        BASISI\(3\) = 2) N
(bldnewH.f90) (Page 5/10) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        BASISI\(4\) = -1) p n
(     ) S
(CASE) K
(\(") p
(spf) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 1) N
(        BASISI\(3\) = 3) N
(        BASISI\(4\) = -1) N
(     ) S
(CASE) K
(\(") p
(sdf) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 2) N
(        BASISI\(3\) = 3) N
(        BASISI\(4\) = -1) N
(     ) S
(CASE) K
(\(") p
(pdf) str
("\) ) p n
(        BASISI\(1\) = 1) N
(        BASISI\(2\) = 2) N
(        BASISI\(3\) = 3) N
(        BASISI\(4\) = -1) N
(     ) S
(CASE) K
(\(") p
(spdf) str
("\) ) p n
(        BASISI\(1\) = 0) N
(        BASISI\(2\) = 1) N
(        BASISI\(3\) = 2) N
(        BASISI\(4\) = 3) N
(        BASISI\(5\) = -1) N
(     ) S
(END) K
( SELECT) p n
() N
(     INDI = MATINDLIST\(I\)) N
() N
(     ) S
(! open loop over neighbors J of atom I) c n
(     ) p
(DO) K
( NEWJ = 1, TOTNEBTB\(I\)) p n
() N
(        J = NEBTB\(1, NEWJ, I\)) N
() N
(        ) S
(IF) K
( \( J ) p
(.GE.) K
( I \) ) p
(THEN) K n
() p n
(           PBCI = NEBTB\(2, NEWJ, I\)) N
(           PBCJ = NEBTB\(3, NEWJ, I\)) N
(           PBCK = NEBTB\(4, NEWJ, I\)) N
(           ) N
(           RIJ\(1\) = CR\(1,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,1\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,1\) + &) p n
(                ) S
(REAL) K
(\(PBCK\)*BOX\(3,1\) - CR\(1,I\)) p n
(           ) N
(           RIJ\(2\) = CR\(2,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,2\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,2\) + &) p n
(                ) S
(REAL) K
(\(PBCK\)*BOX\(3,2\) - CR\(2,I\)) p n
(           ) N
(           RIJ\(3\) = CR\(3,J\) + ) S
(REAL) K
(\(PBCI\)*BOX\(1,3\) + ) p
(REAL) K
(\(PBCJ\)*BOX\(2,3\) + &) p n
(                ) S
(REAL) K
(\(PBCK\)*BOX\(3,3\) - CR\(3,I\)) p n
() N
(           MAGR2 = RIJ\(1\)*RIJ\(1\) + RIJ\(2\)*RIJ\(2\) + RIJ\(3\)*RIJ\(3\)) N
() N
(           RCUTTB = ZERO) N
(           ) S
(DO) K
( K = 1, NOINT) p n
(              ) N
(              ) S
(IF) K
( \( \(ATELE\(I\) ) p
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                   ATELE\(J\) ) S
(.EQ.) K
( ELE2\(K\)\) ) p
(.OR.) K
( &) p n
(                   \(ATELE\(J\) ) S
(.EQ.) K
( ELE1\(K\) ) p
(.AND.) K
( &) p n
(                   ATELE\(I\) ) S
(.EQ.) K
( ELE2\(K\) \)\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(IF) K
( \(BOND\(8,K\) ) p
(.GT.) K
( RCUTTB \) RCUTTB = BOND\(8,K\)) p n
(                 ) N
(                 ) S
(IF) K
( \(BASISTYPE ) p
(.EQ.) K
( ") p
(NONORTHO) str
("\) ) p
(THEN) K n
(                    ) p
(IF) K
( \(OVERL\(8,K\) ) p
(.GT.) K
( RCUTTB \) RCUTTB = OVERL\(8,K\)) p n
(                 ) S
(ENDIF) K n
(                 ) p n
(bldnewH.f90) (Page 6/10) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(bldnewH.f90) (3/5) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(              ) p
(ENDIF) K n
(              ) p n
(           ) S
(ENDDO) K n
(           ) p n
(           ) S
(IF) K
( \(MAGR2 ) p
(.LT.) K
( RCUTTB*RCUTTB\) ) p
(THEN) K n
(              ) p n
(              MAGR = ) S
(SQRT) K
(\(MAGR2\)) p n
(                            ) N
(              ) S
(SELECT CASE) K
(\(BASIS\(ELEMPOINTER\(J\)\)\)) p n
(              ) S
(CASE) K
(\(") p
(s) str
("\)) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = -1) N
(              ) S
(CASE) K
(\(") p
(p) str
("\)) p n
(                 BASISJ\(1\) = 1) N
(                 BASISJ\(2\) = -1) N
(              ) S
(CASE) K
(\(") p
(d) str
("\)) p n
(                 BASISJ\(1\) = 2) N
(                 BASISJ\(2\) = -1) N
(              ) S
(CASE) K
(\(") p
(f) str
("\)) p n
(                 BASISJ\(1\) = 3) N
(                 BASISJ\(2\) = -1) N
(              ) S
(CASE) K
(\(") p
(sp) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 1) N
(                 BASISJ\(3\) = -1) N
(              ) S
(CASE) K
(\(") p
(sd) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 2) N
(                 BASISJ\(3\) = -1) N
(              ) S
(CASE) K
(\(") p
(sf) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 3) N
(                 BASISJ\(3\) = -1) N
(              ) S
(CASE) K
(\(") p
(pd) str
("\) ) p n
(                 BASISJ\(1\) = 1) N
(                 BASISJ\(2\) = 2) N
(                 BASISJ\(3\) = -1) N
(              ) S
(CASE) K
(\(") p
(pf) str
("\) ) p n
(                 BASISJ\(1\) = 1) N
(                 BASISJ\(2\) = 3) N
(                 BASISJ\(3\) = -1) N
(              ) S
(CASE) K
(\(") p
(df) str
("\) ) p n
(                 BASISJ\(1\) = 2) N
(                 BASISJ\(2\) = 3) N
(                 BASISJ\(3\) = -1) N
(              ) S
(CASE) K
(\(") p
(spd) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 1) N
(                 BASISJ\(3\) = 2) N
(                 BASISJ\(4\) = -1) N
(              ) S
(CASE) K
(\(") p
(spf) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 1) N
(                 BASISJ\(3\) = 3) N
(                 BASISJ\(4\) = -1) N
(              ) S
(CASE) K
(\(") p
(sdf) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 2) N
(                 BASISJ\(3\) = 3) N
(                 BASISJ\(4\) = -1) N
(              ) S
(CASE) K
(\(") p
(pdf) str
("\) ) p n
(                 BASISJ\(1\) = 1) N
(bldnewH.f90) (Page 7/10) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                 BASISJ\(2\) = 2) p n
(                 BASISJ\(3\) = 3) N
(                 BASISJ\(4\) = -1) N
(              ) S
(CASE) K
(\(") p
(spdf) str
("\) ) p n
(                 BASISJ\(1\) = 0) N
(                 BASISJ\(2\) = 1) N
(                 BASISJ\(3\) = 2) N
(                 BASISJ\(4\) = 3) N
(                 BASISJ\(5\) = -1) N
(              ) S
(END) K
( SELECT) p n
(              ) N
(              INDJ = MATINDLIST\(J\)) N
(              ) N
(              MAGRP = ) S
(SQRT) K
(\(RIJ\(1\) * RIJ\(1\) + RIJ\(2\) * RIJ\(2\)\)) p n
(              ) N
(              ) S
(! transform to system in which z-axis is aligned with RIJ,) c n
(              ) p
(IF) K
( \() p
(ABS) K
(\(RIJ\(1\)\) ) p
(.GT.) K
( 1E-5\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(IF) K
( \(RIJ\(1\) ) p
(.GT.) K
( ZERO ) p
(.AND.) K
( RIJ\(2\) ) p
(.GE.) K
( ZERO\) ) p
(THEN) K n
(                    PHI = ZERO) p n
(                 ) S
(ELSEIF) K
( \(RIJ\(1\) ) p
(.GT.) K
( ZERO ) p
(.AND.) K
( RIJ\(2\) ) p
(.LT.) K
( ZERO\) ) p
(THEN) K n
(                    PHI = TWO * PI) p n
(                 ) S
(ELSE) K n
(                    PHI = PI) p n
(                 ) S
(ENDIF) K n
(                 ALPHA = ) p
(ATAN) K
(\(RIJ\(2\) / RIJ\(1\)\) + PHI) p n
(                 ) N
(              ) S
(ELSEIF) K
( \() p
(ABS) K
(\(RIJ\(2\)\) ) p
(.GT.) K
( 1E-5\) ) p
(THEN) K n
(                 ) p n
(                 ) S
(IF) K
( \(RIJ\(2\) ) p
(.GT.) K
( 1E-5\) ) p
(THEN) K n
(                    ALPHA = PI / TWO) p n
(                 ) S
(ELSE) K n
(                    ALPHA = THREE * PI / TWO) p n
(                 ) S
(ENDIF) K n
(                 ) p n
(              ) S
(ELSE) K n
(                 ) p
(! pathological case: beta=0 and alpha undefined, but ) c n
(                 ) p
(! this doesn't matter for matrix elements) c n
(                 ) p n
(                 ALPHA = ZERO) N
(                 ) N
(              ) S
(ENDIF) K n
(              ) p n
(              COSBETA = RIJ\(3\)/MAGR) N
(              BETA = ) S
(ACOS) K
(\(RIJ\(3\) / MAGR\)) p n
(              ) N
(              ) S
(! Build matrix elements using eqns \(1\)-\(9\) in PRB 72 165107) c n
(              ) p n
(              ) S
(! The loops over LBRA and LKET need to take into account) c n
(              ) p
(! the orbitals assigned to each atom, e.g., sd rather than) c n
(              ) p
(! spd...) c n
(              ) p n
(              IBRA = INDI + 1) N
(              ) N
(              LBRAINC = 1) N
(              ) S
(DO) K
( ) p
(WHILE) K
( \(BASISI\(LBRAINC\) ) p
(.NE.) K
( -1\)) p n
(                 ) N
(                 LBRA = BASISI\(LBRAINC\)) N
(                 LBRAINC = LBRAINC + 1) N
(                 ) N
(                 ) S
(DO) K
( MBRA = -LBRA, LBRA) p n
(                    ) N
(bldnewH.f90) (Page 8/10) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(bldnewH.f90) (4/5) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                    ) p
(! We can calculate these two outside the ) c n
(                    ) p
(! MKET loop...) c n
() p n
(                    AMMBRA = AM\(MBRA, ALPHA\)) N
(                    WIGLBRAMBRA = WIGNERD\(LBRA, ) S
(ABS) K
(\(MBRA\), 0, COSBETA\)) p n
() N
(                    IKET = INDJ + 1) N
(                    ) N
(                    LKETINC = 1) N
(                    ) S
(DO) K
( ) p
(WHILE) K
( \(BASISJ\(LKETINC\) ) p
(.NE.) K
( -1\)) p n
(                       ) N
(                       LKET = BASISJ\(LKETINC\)) N
(                       LKETINC = LKETINC + 1) N
(                       ) N
(                       ) S
(DO) K
( MKET = -LKET, LKET) p n
(                          ) N
(                          ) S
(! This is the sigma bonds \(mp = 0\)) c n
(                          ) p n
(                          ) S
(! Hamiltonian build) c n
(                          ) p n
(                          ) S
(! Pre-compute the angular part so we can use it) c n
(                          ) p
(! again later if we're building the S matrix too) c n
(                          ) p n
(                          ANGFACTOR = TWO * AMMBRA * &) N
(                               AM\(MKET, ALPHA\) * &) N
(                               WIGLBRAMBRA  * & ) N
(                               WIGNERD\(LKET, ) S
(ABS) K
(\(MKET\), 0, COSBETA\)) p n
(                          ) N
(                          H\(IBRA, IKET\) = H\(IBRA, IKET\) + ANGFACTOR * & ) N
(!                          H\(IKET, IBRA\) = H\(IKET, IBRA\) + ANGFACTOR * & ) c n
(                               UNIVSCALE\(I, J, LBRA, LKET, 0, MAGR, ") p
(H) str
("\)) p n
(                          ) N
(                          ) S
(! Overlap matrix build) c n
(                          ) p n
(                          ) S
(IF) K
( \(BASISTYPE ) p
(.EQ.) K
( ") p
(NONORTHO) str
("\) ) p
(THEN) K n
(                             ) p n
(                             SMAT\(IBRA, IKET\) = SMAT\(IBRA, IKET\) + ANGFACTOR * &) N
(                                  UNIVSCALE\(I, J, LBRA, LKET, 0, MAGR, ") S
(S) str
("\)) p n
(                             ) N
(                          ) S
(ENDIF) K n
(                          ) p n
(                          ) S
(! everything else) c n
(                          ) p n
(                          ) S
(DO) K
( MP = 1, ) p
(MIN) K
(\(LBRA, LKET\)) p n
(                             ) N
(                             ANGFACTOR = SLMMP\(LBRA, MBRA, MP, ALPHA, COSBETA\) *) N
( &) N
(                                  SLMMP\(LKET, MKET, MP, ALPHA, COSBETA\) + &) N
(                                  TLMMP\(LBRA, MBRA, MP, ALPHA, COSBETA\) * &) N
(                                  TLMMP\(LKET, MKET, MP, ALPHA, COSBETA\)) N
(                             ) N
(                             H\(IBRA, IKET\) = H\(IBRA, IKET\) + ANGFACTOR * &) N
(                             ) S
(!H\(IKET, IBRA\) = H\(IKET, IBRA\) + ANGFACTOR * & ) c n
(                                  UNIVSCALE\(I, J, LBRA, LKET, MP, MAGR, ") p
(H) str
("\) ) p n
(                             ) N
(                             ) S
(IF) K
( \(BASISTYPE ) p
(.EQ.) K
( ") p
(NONORTHO) str
("\) ) p
(THEN) K n
(                                ) p n
(                                SMAT\(IBRA, IKET\) = SMAT\(IBRA, IKET\) + &) N
(                                     ANGFACTOR * &) N
(                                     UNIVSCALE\(I, J, LBRA, LKET, MP, MAGR, ") S
(S) str
("\)) p n
(                                ) N
(                             ) S
(ENDIF) K n
(bldnewH.f90) (Page 9/10) (Aug 29, 16 16:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                             ) p n
(                          ) S
(ENDDO) K n
(                          ) p n
(                          H\(IKET, IBRA\) = H\(IBRA, IKET\)) N
(                          ) S
(!H\(IBRA, IKET\) = H\(IKET, IBRA\)) c n
(                          ) p
(IF) K
( \(BASISTYPE ) p
(.EQ.) K
( ") p
(NONORTHO) str
("\) &) p n
(                               SMAT\(IKET, IBRA\) = SMAT\(IBRA, IKET\)) N
(                          ) N
(                          IKET = IKET + 1) N
(                          ) N
(                       ) S
(ENDDO) K n
(                       ) p n
(                    ) S
(ENDDO) K n
(                    ) p n
(                    IBRA = IBRA + 1) N
(                    ) N
(                 ) S
(ENDDO) K n
(              ) p
(ENDDO) K n
(           ) p
(ENDIF) K n
(        ) p
(ENDIF) K n
(     ) p
(ENDDO) K n
(     ) p n
(!     INDI = INDI + NORBI) c n
() p n
(  ) S
(ENDDO) K n
() p n
(!$OMP END PARALLEL DO) c n
() p n
(  ) S
(DO) K
( I = 1, HDIM) p n
(     HDIAG\(I\) = H\(I,I\)) N
(  ) S
(ENDDO) K n
() p n
() N
(  ) S
(IF) K
( \(BASISTYPE ) p
(.EQ.) K
( ") p
(NONORTHO) str
("\) ) p
(THEN) K n
() p n
(     H0 = H) N
(     ) S
(CALL) K
( ) p
(GENX) l n
(     ) p n
(     ) S
(IF) K
( \(DEBUGON ) p
(.EQ.) K
( 1\) ) p
(THEN) K n
(        ) p n
(        ) S
(OPEN) K
(\() p
(UNIT) k
(=30, STATUS=") p
(UNKNOWN) str
(", FILE=") p
(myS.dat) str
("\)) p n
(        ) S
(OPEN) K
(\() p
(UNIT) k
(=31, STATUS=") p
(UNKNOWN) str
(", FILE=") p
(myH0.dat) str
("\)) p n
(        ) N
(        ) S
(PRINT) K
(*, ") p
(Caution - the Slater-Koster H and overlap matrices are being written to file) str
(") p n
(        ) N
(        ) S
(DO) K
( I = 1, HDIM) p n
(           ) S
(WRITE) K
(\(30,10\) \(SMAT\(I,J\), J = 1, HDIM\)) p n
(           ) S
(WRITE) K
(\(31,10\) \(H0\(I,J\), J = 1, HDIM\)) p n
(        ) S
(ENDDO) K n
(        ) p n
(        ) S
(CLOSE) K
(\(30\)) p n
(        ) S
(CLOSE) K
(\(31\)) p n
() N
(10      ) S
(FORMAT) K
(\(100F12.6\) ) p n
() N
(     ) S
(ENDIF) K n
() p n
(  ) S
(ENDIF) K n
() p n
(  ) S
(RETURN) K n
(  ) p n
(END) K
( ) p
(SUBROUTINE) K
( ) p
(BLDNEWHS) L n
(bldnewH.f90) (Page 10/10) (Aug 29, 16 16:25) title
border
grestore
(Printed by Marc Jon Cawkwell) rhead
(bldnewH.f90) (5/5) (Monday August 29, 2016) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
